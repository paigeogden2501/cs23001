// bigint Test Program
//
// Tests:  times_10, uses ==
//
// NEED TO IMPLEMENT
//
#include <iostream>
#include <cassert>
#include "bigint.hpp"

//===========================================================================
int main () {

    std::cout << "\ntesting timesDigit function: \n";

    {
        //------------------------------------------------------
        // Setup fixture
        // single digit bigint
        bigint bi(3);

        // Test 
        bi = bi.timesDigit(1);

        // Verify
        assert(bi == 3); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // double digit bigint
        bigint bi(12);

        // Test 
        bi = bi.timesDigit(2);

        // Verify
        assert(bi == 24); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // three digit bigint
        bigint bi(345);

        // Test 
        bi = bi.timesDigit(8);

        // Verify
        assert(bi == 2760); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("999999999999999");

        // Test 
        bi = bi.timesDigit(9);

        // Verify
        assert(bi == "8999999999999991"); 
        std::cout << "bigint == " << bi << " * 9 = 8999999999999991 \n";
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("234556732449987987463845729845792378234896745");

        // Test 
        bi = bi.timesDigit(1);

        // Verify
        assert(bi == "234556732449987987463845729845792378234896745"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("2337864845829");

        // Test 
        bi = bi.timesDigit(6);

        // Verify
        assert(bi == "14027189074974"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("928743198");

        // Test 
        bi = bi.timesDigit(4);

        // Verify
        assert(bi == "3714972792"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("123123123123");

        // Test 
        bi = bi.timesDigit(5);

        // Verify
        assert(bi == "615615615615"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003849576");

        // Test 
        bi = bi.timesDigit(7);

        // Verify
        assert(bi == "3500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026947032"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // testing close to CAPACITY
        bigint bi("500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Test 
        bi = bi.timesDigit(9);

        // Verify
        assert(bi == "4500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); 
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // testing close to the CAPACTIY of array
        bigint bi("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222");

        // Test 
        bi = bi.timesDigit(2);

        // Verify
        assert(bi == "444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"); 
    }


    //Add test cases as needed.
    
    std::cout << "Done testing bigint * digit" << std::endl;
    return 0;
}
