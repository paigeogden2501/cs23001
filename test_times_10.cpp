// bigint Test Program
//
// Tests:  times_10, uses ==
//
// NEED TO IMPLEMENT
// 
#include <iostream>
#include <cassert>
#include "bigint.hpp"

//===========================================================================
int main () {

    std::cout << "\ntesting times10 function: \n";

    {
        //------------------------------------------------------
        // Setup fixture
        // basic test
        bigint bi(3);

        // Test 
        bi = bi.times10(1);

        // Verify
        assert(bi == 30);
        std::cout << "showing basic test\n";
        std::cout << "bigint == " << bi << " * 10^1 = " << bi << "\n";
    }
    
    //Add test cases as needed.

    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("39879753489");

        // Test 
        bi = bi.times10(5);

        // Verify
        assert(bi == "3987975348900000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("93590187583981923587109895809134898467891347893475");

        // Test 
        bi = bi.times10(20);

        // Verify
        assert(bi == "9359018758398192358710989580913489846789134789347500000000000000000000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(10);

        // Test 
        bi = bi.times10(2);

        // Verify
        assert(bi == 1000);
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // testing num that already ends w zeroes
        bigint bi("13958139480500000");

        // Test 
        bi = bi.times10(7);

        // Verify
        assert(bi == "139581394805000000000000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("7395723940");

        // Test 
        bi = bi.times10(3);

        // Verify
        assert(bi == "7395723940000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi("444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444");

        // Test 
        bi = bi.times10(1);

        // Verify
        assert(bi == "4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444440");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // testing adding lots of zeroes
        bigint bi("2222222222222222222222222222222222222222222222222222222222222222222222222222");

        // Test 
        bi = bi.times10(100);

        // Verify
        assert(bi == "22222222222222222222222222222222222222222222222222222222222222222222222222220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        bigint bi(5);

        // Test 
        bi = bi.times10(92);

        // Verify
        assert(bi == "500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // tests to capacity
        bigint bi("90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Test 
        bi = bi.times10(11);

        // Verify
        assert(bi == "9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }
    {
        //------------------------------------------------------
        // Setup fixture
        // tests to capacity
        bigint bi("500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

        // Test 
        bi = bi.times10(1);

        // Verify
        assert(bi == "5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    }

    std::cout << "Done testing times_10" << std::endl;
    return 0;
}

